/*  ------------------ EP 1 MAC0219 ------------------
    Authors: Pedro Sola Pimentel    NUSP 9298079
             Yannick Thomas Messias NUSP 8803834

    ------------------- Relatorio --------------------
    Este arquivo contem o relatorio de atividades.
*/

Neste EP, criamos funções para multiplicação de matrizes, conforme solicitado 
no enunciado. Na tentativa de chegar a um bom resultado e ter material 
suficiente para comparar os algoritmos, desenvolvemos ao todo 9 funções 
que realizam a tarefa de multiplição:

   1. multMatrix: Realiza a multiplicação das matrizes A e B da forma tradicional, 
                  sem utilizar qualquer paralelização. Cada elemento da matriz 
                  resultante é calculado utilizando um loop da forma padrão.

   2. ompMultMatrix: Realiza a mesma multiplicação de matrizes do multMatrix, 
                     porém acrescido de um #pragma do OpenMP utilizado antes 
                     do primeiro for para paralelizar o loop.
   
   3. parMultMatrix: Realiza a multiplicação de matrizes particionando o 
                     objetivo em 4 matrizes menores, as quais são resultado 
                     da soma de duas partições distintas de A e B, depois 
                     escreve cada uma das 4 submatrizes na matriz final. 
                     Ainda não utiliza threads para realizar a tarefa. 
                     Essa função é importante pois serve de base para as 
                     que se seguem.

   4. parMultMatrix_p: Mesmo algoritmo de parMultMatrix, porém esta utiliza-se 
                       de threads para realizar a tarefa. Para cada uma das 
                       8 multiplicações é criada uma thread designada a fazer 
                       a multiplicação correspondente. Após as threads terem 
                       concluído as múltiplicações, são realizadas as 4 somas 
                       e a posterior reunião das 4 partições resultantes 
                       na matriz final.

   5. parMultMatrix_p2: Mesmo algoritmo de parMultMatrix, porém esta utiliza-se 
                        de threads para realizar a tarefa. Para cada uma das 
                        4 somas é criada uma thread designada a fazer a soma 
                        correspondente. Cada thread é responsável tanto pelas 
                        duas multiplicações, como pela soma, como também por 
                        escrever sua submatriz correspondente na matriz final. 
                        Essa função divide as tarefas da forma mais inteligente 
                        e é esperado um maior aproveitamento em CPUs que 
                        suportem somente 4 threads.

   6. parMultMatrix_o: Mesmo algoritmo de parMultMatrix, porém esta utiliza 
                       a função ompMultMatrix para calcular as 8 multiplicações 
                       ganhando assim paralelismo e um salto de rendimento.
   
   7. bestMultMatrix_o: Utiliza um princípio semelhante à anterior. Depois 
                        de realizados vários testes, notamos que há tamanhos 
                        de matrizes para os quais o cálculo utilizando OpenMP 
                        é mais eficiente. Com isso em mente, subdividimos 
                        a matriz (como em parMultMatrix) recursivamente até 
                        que esse tamanho seja atingido, daí multiplica-se as 
                        matrizes com ompMultMatrix. 
                        Nos testes realizados essa foi a função mais eficiente. 
   
   8. bestMultMatrix_p: Aplica o mesmo princípio da função anterior. Subdividimos 
                        a matriz até um tamanho cuja execução do algoritmo 
                        parMultMatrix_p fosse mais eficiente (de acordo com 
                        as nossas observações em testes diversos) e depois 
                        executa-se este algoritmo, visando melhor rendimento 
                        possível.
   
   9. bestMultMatrix_p2: Aplica o mesmo princípio da função anterior, porém 
                         utilizando a função parMultMatrix_p2.

Criamos o arquivo de teste, test.c, para comparar o tempo de execução e a
corretude de cada algoritmo. Uma saída foi a seguinte:

$ make test
./test 1000 1000 1000
criando matrizes...
A[1000, 1000]
B[1000, 1000]

standard:	    8373.590000 ms
partitioned:    5522.733000 ms
omp:	        1251.696000 ms
partitioned_o:  794.731000 ms
pthread_p:	    1027.724000 ms
pthread_p2:	    1771.274000 ms
best_o:         388.101000 ms
best_p:         480.814000 ms
best_p2:        879.546000 ms

Como pode ser visto, o algoritmo bestMultMatrix_o (best_o) obteve o melhor 
resultado, e o bestMultMatrix_p (best_p) o segundo melhor. Assim, decidimos utilizar 
estes algoritmos como padrão para a multiplicao de matrizes com pthreads e OpenMP.
